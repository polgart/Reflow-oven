<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_uart1_8h" xml:lang="en-US">
<title>C:/Users/EDU_OBOS_5057/Documents/Reflow oven/Design/SW/RO_firmware_v1.X/mcc_generated_files/uart1.h File Reference</title>
<indexterm><primary>C:/Users/EDU_OBOS_5057/Documents/Reflow oven/Design/SW/RO_firmware_v1.X/mcc_generated_files/uart1.h</primary></indexterm>
<programlisting>#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;
</programlisting>Include dependency graph for uart1.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="uart1_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="uart1_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38">UART1_STATUS</link> { 
<link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a64201dc35e33f9e3e3a546c7955c0f9a">UART1_RX_DATA_AVAILABLE</link> = (1 &lt;&lt; 0)
, <link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a7b4e6891ce1399bdcc0d5a0df31b6c7d">UART1_RX_OVERRUN_ERROR</link> = (1 &lt;&lt; 1)
, <link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38ac43473cad794e936eeb01c85273a4265">UART1_FRAMING_ERROR</link> = (1 &lt;&lt; 2)
, <link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a43aec9e79f13c60c2538875afa663715">UART1_PARITY_ERROR</link> = (1 &lt;&lt; 3)
, 
<link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38ac73b2328d7240fe55aa9726bc08bafdd">UART1_RECEIVER_IDLE</link> = (1 &lt;&lt; 4)
, <link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a08cd008fd60513d534686cd30f0285f5">UART1_TX_COMPLETE</link> = (1 &lt;&lt; 8)
, <link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a2c5d95c9eeaa073e8ed30837eee8133a">UART1_TX_FULL</link> = (1 &lt;&lt; 9)
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337">UART1_TRANSFER_STATUS</link> { 
<link linkend="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337a14b52f633075a2c64a9c398182226cad">UART1_TRANSFER_STATUS_RX_FULL</link> = (1 &lt;&lt; 0)
, <link linkend="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337abf088d20603d2eb7c58a2b0791b01c3c">UART1_TRANSFER_STATUS_RX_DATA_PRESENT</link> = (1 &lt;&lt; 1)
, <link linkend="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337a7c53a8983e719fba9a50efe43fd6f244">UART1_TRANSFER_STATUS_RX_EMPTY</link> = (1 &lt;&lt; 2)
, <link linkend="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337a4ed2d6a76a09631f6ba930ac4b72ef87">UART1_TRANSFER_STATUS_TX_FULL</link> = (1 &lt;&lt; 3)
, 
<link linkend="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337adbbf035c51010ab715b38cd145995bb7">UART1_TRANSFER_STATUS_TX_EMPTY</link> = (1 &lt;&lt; 4)
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize</link> (void)</para>
</listitem>
            <listitem><para>uint8_t <link linkend="_uart1_8h_1a4e34071aa3125eb037bd6ae844c7ffbb">UART1_Read</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8h_1a54b157af9fc7b884c3af0faa045b37ba">UART1_Write</link> (uint8_t byte)</para>
</listitem>
            <listitem><para>bool <link linkend="_uart1_8h_1a35ebdf043c6e4995ff711ebc13954861">UART1_IsRxReady</link> (void)</para>
</listitem>
            <listitem><para>bool <link linkend="_uart1_8h_1ae2fc49fa99787bc951e12bd840b1248c">UART1_IsTxReady</link> (void)</para>
</listitem>
            <listitem><para>bool <link linkend="_uart1_8h_1a693f8124b5bec099c5141b65e47f2bb9">UART1_IsTxDone</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8h_1aae82bc4b606e9f317ced09e030c3ed2a">UART1_SetTxInterruptHandler</link> (void(*interruptHandler)(void))</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8h_1ac9c13d037043af27f19a5dbb9987c5ad">UART1_Transmit_CallBack</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8h_1ada9cfd0a8099b051306ff18cea19a165">UART1_SetRxInterruptHandler</link> (void(*interruptHandler)(void))</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8h_1a6f9531a262fcf20e717451d4176fbaac">UART1_Receive_CallBack</link> (void)</para>
</listitem>
            <listitem><para>unsigned int <link linkend="_uart1_8h_1ac5c462004b59c6d0d412835ebcadf528">__attribute__</link> ((deprecated)) UART1_ReadBuffer(uint8_t *buffer</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>unsigned int unsigned int <link linkend="_uart1_8h_1ac513ec351b91c2f8de535e6e15b81b57">numbytes</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38"/>    <section>
    <title>UART1_STATUS</title>
<indexterm><primary>UART1_STATUS</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_STATUS</secondary></indexterm>
<para><computeroutput>enum <link linkend="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38">UART1_STATUS</link></computeroutput></para>
<para>UART1 Driver Hardware Flags</para>

<para>@Summary Specifies the status of the hardware receive or transmit</para>

<para>@Description This type specifies the status of the hardware receive or transmit. More than one of these values may be OR&apos;d together to create a complete status value. To test a value of this type, the bit of interest must be AND&apos;ed with value and checked to see if the result is non-zero. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>UART1_RX_DATA_AVAILABLE</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_RX_DATA_AVAILABLE</secondary></indexterm>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a64201dc35e33f9e3e3a546c7955c0f9a"/>UART1_RX_DATA_AVAILABLE</entry><entry></entry></row><row><entry><indexterm><primary>UART1_RX_OVERRUN_ERROR</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_RX_OVERRUN_ERROR</secondary></indexterm>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a7b4e6891ce1399bdcc0d5a0df31b6c7d"/>UART1_RX_OVERRUN_ERROR</entry><entry></entry></row><row><entry><indexterm><primary>UART1_FRAMING_ERROR</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_FRAMING_ERROR</secondary></indexterm>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38ac43473cad794e936eeb01c85273a4265"/>UART1_FRAMING_ERROR</entry><entry></entry></row><row><entry><indexterm><primary>UART1_PARITY_ERROR</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_PARITY_ERROR</secondary></indexterm>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a43aec9e79f13c60c2538875afa663715"/>UART1_PARITY_ERROR</entry><entry></entry></row><row><entry><indexterm><primary>UART1_RECEIVER_IDLE</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_RECEIVER_IDLE</secondary></indexterm>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38ac73b2328d7240fe55aa9726bc08bafdd"/>UART1_RECEIVER_IDLE</entry><entry></entry></row><row><entry><indexterm><primary>UART1_TX_COMPLETE</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TX_COMPLETE</secondary></indexterm>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a08cd008fd60513d534686cd30f0285f5"/>UART1_TX_COMPLETE</entry><entry></entry></row><row><entry><indexterm><primary>UART1_TX_FULL</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TX_FULL</secondary></indexterm>
<anchor xml:id="_uart1_8h_1a4dcb49cb33e1a9b53cabb3faf59fbd38a2c5d95c9eeaa073e8ed30837eee8133a"/>UART1_TX_FULL</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 270 of file uart1.h.</para>
    </section><anchor xml:id="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337"/>    <section>
    <title>UART1_TRANSFER_STATUS</title>
<indexterm><primary>UART1_TRANSFER_STATUS</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TRANSFER_STATUS</secondary></indexterm>
<para><computeroutput>enum <link linkend="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337">UART1_TRANSFER_STATUS</link></computeroutput></para>
<para>UART1 Driver Transfer Flags</para>

<para>@Summary Specifies the status of the receive or transmit</para>

<para>@Description This type specifies the status of the receive or transmit operation. More than one of these values may be OR&apos;d together to create a complete status value. To test a value of this type, the bit of interest must be AND&apos;ed with value and checked to see if the result is non-zero. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>UART1_TRANSFER_STATUS_RX_FULL</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TRANSFER_STATUS_RX_FULL</secondary></indexterm>
<anchor xml:id="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337a14b52f633075a2c64a9c398182226cad"/>UART1_TRANSFER_STATUS_RX_FULL</entry><entry></entry></row><row><entry><indexterm><primary>UART1_TRANSFER_STATUS_RX_DATA_PRESENT</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TRANSFER_STATUS_RX_DATA_PRESENT</secondary></indexterm>
<anchor xml:id="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337abf088d20603d2eb7c58a2b0791b01c3c"/>UART1_TRANSFER_STATUS_RX_DATA_PRESENT</entry><entry></entry></row><row><entry><indexterm><primary>UART1_TRANSFER_STATUS_RX_EMPTY</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TRANSFER_STATUS_RX_EMPTY</secondary></indexterm>
<anchor xml:id="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337a7c53a8983e719fba9a50efe43fd6f244"/>UART1_TRANSFER_STATUS_RX_EMPTY</entry><entry></entry></row><row><entry><indexterm><primary>UART1_TRANSFER_STATUS_TX_FULL</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TRANSFER_STATUS_TX_FULL</secondary></indexterm>
<anchor xml:id="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337a4ed2d6a76a09631f6ba930ac4b72ef87"/>UART1_TRANSFER_STATUS_TX_FULL</entry><entry></entry></row><row><entry><indexterm><primary>UART1_TRANSFER_STATUS_TX_EMPTY</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_TRANSFER_STATUS_TX_EMPTY</secondary></indexterm>
<anchor xml:id="_uart1_8h_1ab518d77eaaf424f4a274c4fade68d337adbbf035c51010ab715b38cd145995bb7"/>UART1_TRANSFER_STATUS_TX_EMPTY</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 300 of file uart1.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_uart1_8h_1ac5c462004b59c6d0d412835ebcadf528"/>    <section>
    <title>__attribute__()</title>
<indexterm><primary>__attribute__</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>__attribute__</secondary></indexterm>
<para><computeroutput>unsigned int __attribute__ ((deprecated) )</computeroutput></para>
<para>@Summary Returns the number of bytes read by the UART1 peripheral</para>

<para>@Description This routine returns the number of bytes read by the Peripheral and fills the application read buffer with the read data.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function</para>

<para>@Param buffer - Buffer into which the data read from the UART1</para>

<para>@Param numbytes - Total number of bytes that need to be read from the UART1 (must be equal to or less than the size of the buffer)</para>

<para>@Returns Number of bytes actually copied into the caller&apos;s buffer or -1 if there is an error.</para>

<para>@Example <computeroutput> char myBuffer[MY_BUFFER_SIZE]; unsigned int numBytes; UART1_TRANSFER_STATUS status ;</computeroutput></para>

<para><computeroutput>Pre-initialize myBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>numBytes = 0;
while( numBytes &lt; MY_BUFFER_SIZE);
{
    status = UART1_TransferStatusGet ( ) ;
    if (status &amp; UART1_TRANSFER_STATUS_RX_FULL)
    {
        numBytes += UART1_ReadBuffer( myBuffer + numBytes, MY_BUFFER_SIZE - numBytes )  ;
        if(numBytes &lt; readbufferLen)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    else
    {
        continue;
    }
</computeroutput></literallayout> Do something else... } </computeroutput></para>

<para>@Summary Returns the number of bytes written into the internal buffer</para>

<para>@Description This API transfers the data from application buffer to internal buffer and returns the number of bytes added in that queue</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function</para>

<para>@Example <computeroutput> char myBuffer[MY_BUFFER_SIZE]; unsigned int numBytes; UART1_TRANSFER_STATUS status ;</computeroutput></para>

<para><computeroutput>Pre-initialize myBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>numBytes = 0;
while( numBytes &lt; MY_BUFFER_SIZE);
{
    status = UART1_TransferStatusGet ( ) ;
    if (status &amp; UART1_TRANSFER_STATUS_TX_EMPTY)
    {
        numBytes += UART1_WriteBuffer ( myBuffer + numBytes, MY_BUFFER_SIZE - numBytes )  ;
        if(numBytes &lt; writebufferLen)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    else
    {
        continue;
    }
</computeroutput></literallayout> Do something else... } </computeroutput></para>

<para>@Summary Returns the transmitter and receiver transfer status</para>

<para>@Description This returns the transmitter and receiver transfer status.The returned status may contain a value with more than one of the bits specified in the UART1_TRANSFER_STATUS enumeration set. 
<literallayout>&#160;&#xa;</literallayout>
 The caller should perform an &quot;AND&quot; with the bit of interest and verify if the result is non-zero (as shown in the example) to verify the desired status bit.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function</para>

<para>@Param None.</para>

<para>@Returns A UART1_TRANSFER_STATUS value describing the current status of the transfer.</para>

<para>@Example Refer to UART1_ReadBuffer and UART1_WriteBuffer for example</para>

<para>@Summary Returns the character in the read sequence at the offset provided, without extracting it</para>

<para>@Description This routine returns the character in the read sequence at the offset provided, without extracting it</para>

<para>@Param None.</para>

<para>@Example <computeroutput> uint8_t readBuffer[5]; unsigned int data, numBytes = 0; unsigned int readbufferLen = sizeof(readBuffer); <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>;</computeroutput></para>

<para><computeroutput> while(numBytes &lt; readbufferLen) 
<literallayout>&#160;&#xa;</literallayout>
 { 
<literallayout>&#160;&#xa;</literallayout>
 UART1_TasksReceive ( ); Check for data at a particular place in the buffer data = UART1_Peek(3); if(data == 5) { discard all other data if byte that is wanted is received. 
<literallayout>&#160;&#xa;</literallayout>
 continue other operation numBytes += UART1_ReadBuffer ( readBuffer + numBytes , readbufferLen ) ; } else { break; } } </computeroutput></para>

<para>@Summary Returns the status of the receive buffer</para>

<para>@Description This routine returns if the receive buffer is empty or not.</para>

<para>@Param None.</para>

<para>@Returns True if the receive buffer is empty False if the receive buffer is not empty</para>

<para>@Example <computeroutput> char myBuffer[MY_BUFFER_SIZE]; unsigned int numBytes; UART1_TRANSFER_STATUS status ;</computeroutput></para>

<para><computeroutput>Pre-initialize myBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>numBytes = 0;
while( numBytes &lt; MY_BUFFER_SIZE);
{
    status = UART1_TransferStatusGet ( ) ;
    if (!UART1_ReceiveBufferIsEmpty())
    {
        numBytes += UART1_ReadBuffer( myBuffer + numBytes, MY_BUFFER_SIZE - numBytes )  ;
        if(numBytes &lt; readbufferLen)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    else
    {
        continue;
    }
</computeroutput></literallayout> Do something else... } </computeroutput></para>

<para>@Summary Returns the status of the transmit buffer</para>

<para>@Description This routine returns if the transmit buffer is full or not.</para>

<para>@Param None.</para>

<para>@Returns True if the transmit buffer is full False if the transmit buffer is not full</para>

<para>@Example Refer to <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link> for example.</para>

<para>@Summary Returns the transmitter and receiver status</para>

<para>@Description This returns the transmitter and receiver status. The returned status may contain a value with more than one of the bits specified in the UART1_STATUS enumeration set. 
<literallayout>&#160;&#xa;</literallayout>
 The caller should perform an &quot;AND&quot; with the bit of interest and verify if the result is non-zero (as shown in the example) to verify the desired status bit.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function</para>

<para>@Param None.</para>

<para>@Returns A UART1_STATUS value describing the current status of the transfer.</para>

<para>@Example <computeroutput> while(!(UART1_StatusGet &amp; UART1_TX_COMPLETE )) { Wait for the tranmission to complete } </computeroutput></para>

<para>@Summary Allows setting of a the enable bit for the UART1 mode</para>

<para>@Description This routine is used to enable the UART1</para>

<para>@Preconditions <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link> function should have been called before calling this function.</para>

<para>@Returns None</para>

<para>@Param None</para>

<para>@Example Refer to <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>; for an example</para>

<para>@Summary Allows setting of a the disable bit for the UART1 mode</para>

<para>@Description This routine is used to disable the UART1</para>

<para>@Preconditions <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link> function should have been called before calling this function.</para>

<para>@Returns None</para>

<para>@Param None</para>

<para>@Example Refer to <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>; for an example</para>

<para>@Summary Returns the number of bytes remaining in the receive buffer</para>

<para>@Description This routine returns the number of bytes remaining in the receive buffer.</para>

<para>@Param None.</para>

<para>@Returns Remaining size of receive buffer.</para>

<para>@Example <computeroutput> uint8_t readBuffer[MY_BUFFER_SIZE]; unsigned int size, numBytes = 0; <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>;</computeroutput></para>

<para><computeroutput>Pre-initialize readBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>while (size &lt; MY_BUFFER_SIZE) {
    size = UART1_ReceiveBufferSizeGet();
}
numBytes = UART1_ReadBuffer(readBuffer, MY_BUFFER_SIZE);
&lt;/code&gt;
</computeroutput></literallayout></computeroutput></para>

<para><computeroutput> @Summary Returns the number of bytes remaining in the transmit buffer.</computeroutput></para>

<para><computeroutput> @Description This routine returns the number of bytes remaining in the transmit buffer.</computeroutput></para>

<para><computeroutput>@Param None.</computeroutput></para>

<para><computeroutput>@Returns Remaining size of transmit buffer.</computeroutput></para>

<para><computeroutput>@Example Refer to <link linkend="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>; for example. </computeroutput></para>
    </section><anchor xml:id="_uart1_8h_1a10757505060dc7bf0fe148c5363eae08"/>    <section>
    <title>UART1_Initialize()</title>
<indexterm><primary>UART1_Initialize</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_Initialize</secondary></indexterm>
<para><computeroutput>void UART1_Initialize (void )</computeroutput></para>
<para>UART1 Generated Driver API Header File</para>

<para>@Company Microchip Technology Inc.</para>

<para>@File Name <link linkend="_uart1_8h">uart1.h</link></para>

<para>@Summary This is the generated header file for the UART1 driver using PIC24 / dsPIC33 / PIC32MM MCUs</para>

<para>@Description This header file provides APIs for driver for UART1. Generation Information : Product Revision : PIC24 / dsPIC33 / PIC32MM MCUs - 1.170.0 Device : PIC24FJ256GA702 The generated drivers are tested against the following: Compiler : XC16 v1.61 MPLAB : MPLAB X v5.45 Section: Included Files Section: UART1 Driver Routines @Summary Initializes the UART instance : 1</para>

<para>@Description This routine initializes the UART driver instance for : 1 index. This routine must be called before any other UART routine is called.</para>

<para>@Preconditions None.</para>

<para>@Returns None.</para>

<para>@Param None.</para>

<para>@Comment None. 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para>@Example None.</para>

<para>Section: Driver Interface </para>
<para>
Definition at line 103 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8h_1a35ebdf043c6e4995ff711ebc13954861"/>    <section>
    <title>UART1_IsRxReady()</title>
<indexterm><primary>UART1_IsRxReady</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_IsRxReady</secondary></indexterm>
<para><computeroutput>bool UART1_IsRxReady (void )</computeroutput></para>
<para>@Description Indicates of there is data available to read.</para>

<para>@Returns true if byte can be read. false if byte can&apos;t be read right now. </para>
<para>
Definition at line 285 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8h_1a693f8124b5bec099c5141b65e47f2bb9"/>    <section>
    <title>UART1_IsTxDone()</title>
<indexterm><primary>UART1_IsTxDone</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_IsTxDone</secondary></indexterm>
<para><computeroutput>bool UART1_IsTxDone (void )</computeroutput></para>
<para>@Description Indicates if all bytes have been transferred.</para>

<para>@Returns true if all bytes transfered. false if there is still data pending to transfer. </para>
<para>
Definition at line 307 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8h_1ae2fc49fa99787bc951e12bd840b1248c"/>    <section>
    <title>UART1_IsTxReady()</title>
<indexterm><primary>UART1_IsTxReady</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_IsTxReady</secondary></indexterm>
<para><computeroutput>bool UART1_IsTxReady (void )</computeroutput></para>
<para>@Description Indicates if a byte can be written.</para>

<para>@Returns true if byte can be written. false if byte can&apos;t be written right now. </para>
<para>
Definition at line 290 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8h_1a4e34071aa3125eb037bd6ae844c7ffbb"/>    <section>
    <title>UART1_Read()</title>
<indexterm><primary>UART1_Read</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_Read</secondary></indexterm>
<para><computeroutput>uint8_t UART1_Read (void )</computeroutput></para>
<para>@Summary Read a byte of data from the UART1</para>

<para>@Description This routine reads a byte of data from the UART1.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function. The transfer status should be checked to see if the receiver is not empty before calling this function.</para>

<para>@Param None.</para>

<para>@Returns A data byte received by the driver.</para>

<para>@Example None.</para>

<para>Section: UART Driver Client Routines </para>
<para>
Definition at line 248 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8h_1a6f9531a262fcf20e717451d4176fbaac"/>    <section>
    <title>UART1_Receive_CallBack()</title>
<indexterm><primary>UART1_Receive_CallBack</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_Receive_CallBack</secondary></indexterm>
<para><computeroutput>void UART1_Receive_CallBack (void )</computeroutput></para>
<para>@Summary Receive callback routine.</para>

<para>@Description This routine is a receive callback function.</para>

<para>@Param None.</para>

<para>@Returns None</para>

<para>@Example <computeroutput> UART1_SetTxInterruptHandler(&amp;UART1_Receive_CallBack); </computeroutput> </para>
    </section><anchor xml:id="_uart1_8h_1ada9cfd0a8099b051306ff18cea19a165"/>    <section>
    <title>UART1_SetRxInterruptHandler()</title>
<indexterm><primary>UART1_SetRxInterruptHandler</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_SetRxInterruptHandler</secondary></indexterm>
<para><computeroutput>void UART1_SetRxInterruptHandler (void(*)(void) interruptHandler)</computeroutput></para>
<para>@Summary Assigns a function pointer with a receive callback address.</para>

<para>@Description This routine assigns a function pointer with a receive callback address.</para>

<para>@Param Address of the callback routine.</para>

<para>@Returns None</para>

<para>@Example <computeroutput> UART1_SetRxInterruptHandler(&amp;UART1_Receive_CallBack); </computeroutput> </para>
<para>
Definition at line 187 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8h_1aae82bc4b606e9f317ced09e030c3ed2a"/>    <section>
    <title>UART1_SetTxInterruptHandler()</title>
<indexterm><primary>UART1_SetTxInterruptHandler</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_SetTxInterruptHandler</secondary></indexterm>
<para><computeroutput>void UART1_SetTxInterruptHandler (void(*)(void) interruptHandler)</computeroutput></para>
<para>@Summary Assigns a function pointer with a transmit callback address.</para>

<para>@Description This routine assigns a function pointer with a transmit callback address.</para>

<para>@Param Address of the callback routine.</para>

<para>@Returns None</para>

<para>@Example <computeroutput> UART1_SetTxInterruptHandler(&amp;UART1_Transmit_CallBack); </computeroutput></para>

<para>Maintains the driver&apos;s transmitter state machine and implements its ISR </para>
<para>
Definition at line 140 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8h_1ac9c13d037043af27f19a5dbb9987c5ad"/>    <section>
    <title>UART1_Transmit_CallBack()</title>
<indexterm><primary>UART1_Transmit_CallBack</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_Transmit_CallBack</secondary></indexterm>
<para><computeroutput>void UART1_Transmit_CallBack (void )</computeroutput></para>
<para>@Summary Transmit callback routine.</para>

<para>@Description This routine is a transmit callback function.</para>

<para>@Param None.</para>

<para>@Returns None</para>

<para>@Example <computeroutput> UART1_SetTxInterruptHandler(&amp;UART1_Transmit_CallBack); </computeroutput> </para>
    </section><anchor xml:id="_uart1_8h_1a54b157af9fc7b884c3af0faa045b37ba"/>    <section>
    <title>UART1_Write()</title>
<indexterm><primary>UART1_Write</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>UART1_Write</secondary></indexterm>
<para><computeroutput>void UART1_Write (uint8_t byte)</computeroutput></para>
<para>@Summary Writes a byte of data to the UART1</para>

<para>@Description This routine writes a byte of data to the UART1.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function. The transfer status should be checked to see if transmitter is not full before calling this function.</para>

<para>@Param byte - Data byte to write to the UART1</para>

<para>@Returns None.</para>

<para>@Example None. </para>
<para>
Definition at line 267 of file uart1.c.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_uart1_8h_1ac513ec351b91c2f8de535e6e15b81b57"/>    <section>
    <title>numbytes</title>
<indexterm><primary>numbytes</primary><secondary>uart1.h</secondary></indexterm>
<indexterm><primary>uart1.h</primary><secondary>numbytes</secondary></indexterm>
<para><computeroutput>unsigned int unsigned int numbytes</computeroutput></para><para>
Definition at line 370 of file uart1.h.</para>
</section>
</section>
</section>
