<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_uart1_8c" xml:lang="en-US">
<title>C:/Users/EDU_OBOS_5057/Documents/Reflow oven/Design/SW/RO_firmware_v1.X/mcc_generated_files/uart1.c File Reference</title>
<indexterm><primary>C:/Users/EDU_OBOS_5057/Documents/Reflow oven/Design/SW/RO_firmware_v1.X/mcc_generated_files/uart1.c</primary></indexterm>
<programlisting>#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stddef.h&gt;
#include &quot;xc.h&quot;
#include &quot;uart1.h&quot;
</programlisting>Include dependency graph for uart1.c:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="uart1_8c__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_uart1_8c_1ab55cfc0120f06935cefce58c28c90663">UART1_CONFIG_TX_BYTEQ_LENGTH</link>   (8+1)</para>
</listitem>
            <listitem><para>#define <link linkend="_uart1_8c_1a4e8a53fe27933d14b278e49b13a5b5fd">UART1_CONFIG_RX_BYTEQ_LENGTH</link>   (8+1)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8c_1aae82bc4b606e9f317ced09e030c3ed2a">UART1_SetTxInterruptHandler</link> (void(*interruptHandler)(void))</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8c_1a226557d5e42f7e29ddaff30606138459">__attribute__</link> ((interrupt, no_auto_psv))</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8c_1a201468129b483039afc5a619e2d31097">__attribute__</link> ((weak))</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8c_1ada9cfd0a8099b051306ff18cea19a165">UART1_SetRxInterruptHandler</link> (void(*interruptHandler)(void))</para>
</listitem>
            <listitem><para>uint8_t <link linkend="_uart1_8c_1a4e34071aa3125eb037bd6ae844c7ffbb">UART1_Read</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_uart1_8c_1a54b157af9fc7b884c3af0faa045b37ba">UART1_Write</link> (uint8_t byte)</para>
</listitem>
            <listitem><para>bool <link linkend="_uart1_8c_1a35ebdf043c6e4995ff711ebc13954861">UART1_IsRxReady</link> (void)</para>
</listitem>
            <listitem><para>bool <link linkend="_uart1_8c_1ae2fc49fa99787bc951e12bd840b1248c">UART1_IsTxReady</link> (void)</para>
</listitem>
            <listitem><para>bool <link linkend="_uart1_8c_1a693f8124b5bec099c5141b65e47f2bb9">UART1_IsTxDone</link> (void)</para>
</listitem>
            <listitem><para>unsigned int <link linkend="_uart1_8c_1ae5ba78607a8375e69d112ebeb07c211f">__attribute__</link> ((deprecated))</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>void(* <link linkend="_uart1_8c_1ac05fd2e970a7c8da5ea79d54963514ce">UART1_TxDefaultInterruptHandler</link> )(void)</para>
</listitem>
            <listitem><para>void(* <link linkend="_uart1_8c_1adb1e097e46e2939d8c341298892a9333">UART1_RxDefaultInterruptHandler</link> )(void)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_uart1_8c_1a4e8a53fe27933d14b278e49b13a5b5fd"/>    <section>
    <title>UART1_CONFIG_RX_BYTEQ_LENGTH</title>
<indexterm><primary>UART1_CONFIG_RX_BYTEQ_LENGTH</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_CONFIG_RX_BYTEQ_LENGTH</secondary></indexterm>
<para><computeroutput>#define UART1_CONFIG_RX_BYTEQ_LENGTH   (8+1)</computeroutput></para><para>
Definition at line 84 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1ab55cfc0120f06935cefce58c28c90663"/>    <section>
    <title>UART1_CONFIG_TX_BYTEQ_LENGTH</title>
<indexterm><primary>UART1_CONFIG_TX_BYTEQ_LENGTH</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_CONFIG_TX_BYTEQ_LENGTH</secondary></indexterm>
<para><computeroutput>#define UART1_CONFIG_TX_BYTEQ_LENGTH   (8+1)</computeroutput></para>
<para>UART Driver Queue Length</para>

<para>@Summary Defines the length of the Transmit and Receive Buffers </para>
<para>
Definition at line 83 of file uart1.c.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_uart1_8c_1ae5ba78607a8375e69d112ebeb07c211f"/>    <section>
    <title>__attribute__()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__attribute__</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>__attribute__</secondary></indexterm>
<para><computeroutput>unsigned int __attribute__ ((deprecated) )</computeroutput></para>
<para>@Summary Returns the number of bytes written into the internal buffer</para>

<para>@Description This API transfers the data from application buffer to internal buffer and returns the number of bytes added in that queue</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function</para>

<para>@Example <computeroutput> char myBuffer[MY_BUFFER_SIZE]; unsigned int numBytes; UART1_TRANSFER_STATUS status ;</computeroutput></para>

<para><computeroutput>Pre-initialize myBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>numBytes = 0;
while( numBytes &lt; MY_BUFFER_SIZE);
{
    status = UART1_TransferStatusGet ( ) ;
    if (status &amp; UART1_TRANSFER_STATUS_TX_EMPTY)
    {
        numBytes += UART1_WriteBuffer ( myBuffer + numBytes, MY_BUFFER_SIZE - numBytes )  ;
        if(numBytes &lt; writebufferLen)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    else
    {
        continue;
    }
</computeroutput></literallayout> Do something else... } </computeroutput></para>

<para>@Summary Returns the transmitter and receiver transfer status</para>

<para>@Description This returns the transmitter and receiver transfer status.The returned status may contain a value with more than one of the bits specified in the UART1_TRANSFER_STATUS enumeration set. 
<literallayout>&#160;&#xa;</literallayout>
 The caller should perform an &quot;AND&quot; with the bit of interest and verify if the result is non-zero (as shown in the example) to verify the desired status bit.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function</para>

<para>@Param None.</para>

<para>@Returns A UART1_TRANSFER_STATUS value describing the current status of the transfer.</para>

<para>@Example Refer to UART1_ReadBuffer and UART1_WriteBuffer for example</para>

<para>@Summary Returns the character in the read sequence at the offset provided, without extracting it</para>

<para>@Description This routine returns the character in the read sequence at the offset provided, without extracting it</para>

<para>@Param None.</para>

<para>@Example <computeroutput> uint8_t readBuffer[5]; unsigned int data, numBytes = 0; unsigned int readbufferLen = sizeof(readBuffer); <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>;</computeroutput></para>

<para><computeroutput> while(numBytes &lt; readbufferLen) 
<literallayout>&#160;&#xa;</literallayout>
 { 
<literallayout>&#160;&#xa;</literallayout>
 UART1_TasksReceive ( ); Check for data at a particular place in the buffer data = UART1_Peek(3); if(data == 5) { discard all other data if byte that is wanted is received. 
<literallayout>&#160;&#xa;</literallayout>
 continue other operation numBytes += UART1_ReadBuffer ( readBuffer + numBytes , readbufferLen ) ; } else { break; } } </computeroutput></para>

<para>@Summary Returns the status of the receive buffer</para>

<para>@Description This routine returns if the receive buffer is empty or not.</para>

<para>@Param None.</para>

<para>@Returns True if the receive buffer is empty False if the receive buffer is not empty</para>

<para>@Example <computeroutput> char myBuffer[MY_BUFFER_SIZE]; unsigned int numBytes; UART1_TRANSFER_STATUS status ;</computeroutput></para>

<para><computeroutput>Pre-initialize myBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>numBytes = 0;
while( numBytes &lt; MY_BUFFER_SIZE);
{
    status = UART1_TransferStatusGet ( ) ;
    if (!UART1_ReceiveBufferIsEmpty())
    {
        numBytes += UART1_ReadBuffer( myBuffer + numBytes, MY_BUFFER_SIZE - numBytes )  ;
        if(numBytes &lt; readbufferLen)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    else
    {
        continue;
    }
</computeroutput></literallayout> Do something else... } </computeroutput></para>

<para>@Summary Returns the status of the transmit buffer</para>

<para>@Description This routine returns if the transmit buffer is full or not.</para>

<para>@Param None.</para>

<para>@Returns True if the transmit buffer is full False if the transmit buffer is not full</para>

<para>@Example Refer to <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link> for example.</para>

<para>@Summary Returns the transmitter and receiver status</para>

<para>@Description This returns the transmitter and receiver status. The returned status may contain a value with more than one of the bits specified in the UART1_STATUS enumeration set. 
<literallayout>&#160;&#xa;</literallayout>
 The caller should perform an &quot;AND&quot; with the bit of interest and verify if the result is non-zero (as shown in the example) to verify the desired status bit.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function</para>

<para>@Param None.</para>

<para>@Returns A UART1_STATUS value describing the current status of the transfer.</para>

<para>@Example <computeroutput> while(!(UART1_StatusGet &amp; UART1_TX_COMPLETE )) { Wait for the tranmission to complete } </computeroutput></para>

<para>@Summary Allows setting of a the enable bit for the UART1 mode</para>

<para>@Description This routine is used to enable the UART1</para>

<para>@Preconditions <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link> function should have been called before calling this function.</para>

<para>@Returns None</para>

<para>@Param None</para>

<para>@Example Refer to <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>; for an example</para>

<para>@Summary Allows setting of a the disable bit for the UART1 mode</para>

<para>@Description This routine is used to disable the UART1</para>

<para>@Preconditions <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link> function should have been called before calling this function.</para>

<para>@Returns None</para>

<para>@Param None</para>

<para>@Example Refer to <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>; for an example</para>

<para>@Summary Returns the number of bytes remaining in the receive buffer</para>

<para>@Description This routine returns the number of bytes remaining in the receive buffer.</para>

<para>@Param None.</para>

<para>@Returns Remaining size of receive buffer.</para>

<para>@Example <computeroutput> uint8_t readBuffer[MY_BUFFER_SIZE]; unsigned int size, numBytes = 0; <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>;</computeroutput></para>

<para><computeroutput>Pre-initialize readBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>while (size &lt; MY_BUFFER_SIZE) {
    size = UART1_ReceiveBufferSizeGet();
}
numBytes = UART1_ReadBuffer(readBuffer, MY_BUFFER_SIZE);
&lt;/code&gt;
</computeroutput></literallayout></computeroutput></para>

<para><computeroutput> @Summary Returns the number of bytes remaining in the transmit buffer.</computeroutput></para>

<para><computeroutput> @Description This routine returns the number of bytes remaining in the transmit buffer.</computeroutput></para>

<para><computeroutput>@Param None.</computeroutput></para>

<para><computeroutput>@Returns Remaining size of transmit buffer.</computeroutput></para>

<para><computeroutput>@Example Refer to <link linkend="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08">UART1_Initialize()</link>; for example.</computeroutput></para>

<para><computeroutput> @Summary Returns the number of bytes written into the internal buffer</computeroutput></para>

<para><computeroutput> @Description This API transfers the data from application buffer to internal buffer and returns the number of bytes added in that queue</computeroutput></para>

<para><computeroutput> @Preconditions UART2_Initialize function should have been called before calling this function</computeroutput></para>

<para><computeroutput> @Example <computeroutput> char myBuffer[MY_BUFFER_SIZE]; unsigned int numBytes; UART2_TRANSFER_STATUS status ;</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput>Pre-initialize myBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>numBytes = 0;
while( numBytes &lt; MY_BUFFER_SIZE);
{
    status = UART2_TransferStatusGet ( ) ;
    if (status &amp; UART2_TRANSFER_STATUS_TX_EMPTY)
    {
        numBytes += UART2_WriteBuffer ( myBuffer + numBytes, MY_BUFFER_SIZE - numBytes )  ;
        if(numBytes &lt; writebufferLen)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    else
    {
        continue;
    }
</computeroutput></literallayout> Do something else... } </computeroutput></computeroutput></para>

<para><computeroutput>@Summary Returns the transmitter and receiver transfer status</computeroutput></para>

<para><computeroutput>@Description This returns the transmitter and receiver transfer status.The returned status may contain a value with more than one of the bits specified in the UART2_TRANSFER_STATUS enumeration set. 
<literallayout>&#160;&#xa;</literallayout>
 The caller should perform an &quot;AND&quot; with the bit of interest and verify if the result is non-zero (as shown in the example) to verify the desired status bit.</computeroutput></para>

<para><computeroutput>@Preconditions UART2_Initialize function should have been called before calling this function</computeroutput></para>

<para><computeroutput>@Param None.</computeroutput></para>

<para><computeroutput>@Returns A UART2_TRANSFER_STATUS value describing the current status of the transfer.</computeroutput></para>

<para><computeroutput>@Example Refer to UART2_ReadBuffer and UART2_WriteBuffer for example</computeroutput></para>

<para><computeroutput> @Summary Returns the character in the read sequence at the offset provided, without extracting it</computeroutput></para>

<para><computeroutput> @Description This routine returns the character in the read sequence at the offset provided, without extracting it</computeroutput></para>

<para><computeroutput> @Param None.</computeroutput></para>

<para><computeroutput> @Example <computeroutput> uint8_t readBuffer[5]; unsigned int data, numBytes = 0; unsigned int readbufferLen = sizeof(readBuffer); <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link>;</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput> while(numBytes &lt; readbufferLen) 
<literallayout>&#160;&#xa;</literallayout>
 { 
<literallayout>&#160;&#xa;</literallayout>
 UART2_TasksReceive ( ); Check for data at a particular place in the buffer data = UART2_Peek(3); if(data == 5) { discard all other data if byte that is wanted is received. 
<literallayout>&#160;&#xa;</literallayout>
 continue other operation numBytes += UART2_ReadBuffer ( readBuffer + numBytes , readbufferLen ) ; } else { break; } } </computeroutput></computeroutput></para>

<para><computeroutput> @Summary Returns the status of the receive buffer</computeroutput></para>

<para><computeroutput> @Description This routine returns if the receive buffer is empty or not.</computeroutput></para>

<para><computeroutput> @Param None.</computeroutput></para>

<para><computeroutput> @Returns True if the receive buffer is empty False if the receive buffer is not empty</computeroutput></para>

<para><computeroutput> @Example <computeroutput> char myBuffer[MY_BUFFER_SIZE]; unsigned int numBytes; UART2_TRANSFER_STATUS status ;</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput>Pre-initialize myBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>numBytes = 0;
while( numBytes &lt; MY_BUFFER_SIZE);
{
    status = UART2_TransferStatusGet ( ) ;
    if (!UART2_ReceiveBufferIsEmpty())
    {
        numBytes += UART2_ReadBuffer( myBuffer + numBytes, MY_BUFFER_SIZE - numBytes )  ;
        if(numBytes &lt; readbufferLen)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    else
    {
        continue;
    }
</computeroutput></literallayout> Do something else... } </computeroutput></computeroutput></para>

<para><computeroutput> @Summary Returns the status of the transmit buffer</computeroutput></para>

<para><computeroutput> @Description This routine returns if the transmit buffer is full or not.</computeroutput></para>

<para><computeroutput>@Param None.</computeroutput></para>

<para><computeroutput>@Returns True if the transmit buffer is full False if the transmit buffer is not full</computeroutput></para>

<para><computeroutput>@Example Refer to <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link> for example.</computeroutput></para>

<para><computeroutput> @Summary Returns the transmitter and receiver status</computeroutput></para>

<para><computeroutput> @Description This returns the transmitter and receiver status. The returned status may contain a value with more than one of the bits specified in the UART2_STATUS enumeration set. 
<literallayout>&#160;&#xa;</literallayout>
 The caller should perform an &quot;AND&quot; with the bit of interest and verify if the result is non-zero (as shown in the example) to verify the desired status bit.</computeroutput></para>

<para><computeroutput> @Preconditions UART2_Initialize function should have been called before calling this function</computeroutput></para>

<para><computeroutput> @Param None.</computeroutput></para>

<para><computeroutput> @Returns A UART2_STATUS value describing the current status of the transfer.</computeroutput></para>

<para><computeroutput> @Example <computeroutput> while(!(UART2_StatusGet &amp; UART2_TX_COMPLETE )) { Wait for the tranmission to complete } </computeroutput></computeroutput></para>

<para><computeroutput>@Summary Allows setting of a the enable bit for the UART2 mode</computeroutput></para>

<para><computeroutput>@Description This routine is used to enable the UART2</computeroutput></para>

<para><computeroutput>@Preconditions <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link> function should have been called before calling this function.</computeroutput></para>

<para><computeroutput>@Returns None</computeroutput></para>

<para><computeroutput>@Param None</computeroutput></para>

<para><computeroutput>@Example Refer to <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link>; for an example</computeroutput></para>

<para><computeroutput>@Summary Allows setting of a the disable bit for the UART2 mode</computeroutput></para>

<para><computeroutput>@Description This routine is used to disable the UART2</computeroutput></para>

<para><computeroutput>@Preconditions <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link> function should have been called before calling this function.</computeroutput></para>

<para><computeroutput>@Returns None</computeroutput></para>

<para><computeroutput>@Param None</computeroutput></para>

<para><computeroutput>@Example Refer to <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link>; for an example</computeroutput></para>

<para><computeroutput> @Summary Returns the number of bytes remaining in the receive buffer</computeroutput></para>

<para><computeroutput> @Description This routine returns the number of bytes remaining in the receive buffer.</computeroutput></para>

<para><computeroutput> @Param None.</computeroutput></para>

<para><computeroutput> @Returns Remaining size of receive buffer.</computeroutput></para>

<para><computeroutput> @Example <computeroutput> uint8_t readBuffer[MY_BUFFER_SIZE]; unsigned int size, numBytes = 0; <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link>;</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput>Pre-initialize readBuffer with MY_BUFFER_SIZE bytes of valid data. <literallayout><computeroutput>while (size &lt; MY_BUFFER_SIZE) {
    size = UART2_ReceiveBufferSizeGet();
}
numBytes = UART2_ReadBuffer(readBuffer, MY_BUFFER_SIZE);
&lt;/code&gt;
</computeroutput></literallayout></computeroutput></computeroutput></para>

<para><computeroutput><computeroutput> @Summary Returns the number of bytes remaining in the transmit buffer.</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput> @Description This routine returns the number of bytes remaining in the transmit buffer.</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput>@Param None.</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput>@Returns Remaining size of transmit buffer.</computeroutput></computeroutput></para>

<para><computeroutput><computeroutput>@Example Refer to <link linkend="_uart2_8h_1a1c7f32800f7e5955bc04306b2686a0d7">UART2_Initialize()</link>; for example. </computeroutput></computeroutput></para>
<para>
Definition at line 369 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1a226557d5e42f7e29ddaff30606138459"/>    <section>
    <title>__attribute__()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__attribute__</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>__attribute__</secondary></indexterm>
<para><computeroutput>void __attribute__ ((interrupt, no_auto_psv) )</computeroutput></para><para>
Definition at line 152 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1a201468129b483039afc5a619e2d31097"/>    <section>
    <title>__attribute__()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__attribute__</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>__attribute__</secondary></indexterm>
<para><computeroutput>void __attribute__ ((weak) )</computeroutput></para><para>
Definition at line 182 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1a10757505060dc7bf0fe148c5363eae08"/>    <section>
    <title>UART1_Initialize()</title>
<indexterm><primary>UART1_Initialize</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_Initialize</secondary></indexterm>
<para><computeroutput>void UART1_Initialize (void )</computeroutput></para>
<para>Section: Driver Interface </para>
<para>
Definition at line 103 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1a35ebdf043c6e4995ff711ebc13954861"/>    <section>
    <title>UART1_IsRxReady()</title>
<indexterm><primary>UART1_IsRxReady</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_IsRxReady</secondary></indexterm>
<para><computeroutput>bool UART1_IsRxReady (void )</computeroutput></para>
<para>@Description Indicates of there is data available to read.</para>

<para>@Returns true if byte can be read. false if byte can&apos;t be read right now. </para>
<para>
Definition at line 285 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1a693f8124b5bec099c5141b65e47f2bb9"/>    <section>
    <title>UART1_IsTxDone()</title>
<indexterm><primary>UART1_IsTxDone</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_IsTxDone</secondary></indexterm>
<para><computeroutput>bool UART1_IsTxDone (void )</computeroutput></para>
<para>@Description Indicates if all bytes have been transferred.</para>

<para>@Returns true if all bytes transfered. false if there is still data pending to transfer. </para>
<para>
Definition at line 307 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1ae2fc49fa99787bc951e12bd840b1248c"/>    <section>
    <title>UART1_IsTxReady()</title>
<indexterm><primary>UART1_IsTxReady</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_IsTxReady</secondary></indexterm>
<para><computeroutput>bool UART1_IsTxReady (void )</computeroutput></para>
<para>@Description Indicates if a byte can be written.</para>

<para>@Returns true if byte can be written. false if byte can&apos;t be written right now. </para>
<para>
Definition at line 290 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1a4e34071aa3125eb037bd6ae844c7ffbb"/>    <section>
    <title>UART1_Read()</title>
<indexterm><primary>UART1_Read</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_Read</secondary></indexterm>
<para><computeroutput>uint8_t UART1_Read (void )</computeroutput></para>
<para>Section: UART Driver Client Routines </para>
<para>
Definition at line 248 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1ada9cfd0a8099b051306ff18cea19a165"/>    <section>
    <title>UART1_SetRxInterruptHandler()</title>
<indexterm><primary>UART1_SetRxInterruptHandler</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_SetRxInterruptHandler</secondary></indexterm>
<para><computeroutput>void UART1_SetRxInterruptHandler (void(*)(void) interruptHandler)</computeroutput></para>
<para>@Summary Assigns a function pointer with a receive callback address.</para>

<para>@Description This routine assigns a function pointer with a receive callback address.</para>

<para>@Param Address of the callback routine.</para>

<para>@Returns None</para>

<para>@Example <computeroutput> UART1_SetRxInterruptHandler(&amp;UART1_Receive_CallBack); </computeroutput> </para>
<para>
Definition at line 187 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1aae82bc4b606e9f317ced09e030c3ed2a"/>    <section>
    <title>UART1_SetTxInterruptHandler()</title>
<indexterm><primary>UART1_SetTxInterruptHandler</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_SetTxInterruptHandler</secondary></indexterm>
<para><computeroutput>void UART1_SetTxInterruptHandler (void(*)(void) interruptHandler)</computeroutput></para>
<para>Maintains the driver&apos;s transmitter state machine and implements its ISR </para>
<para>
Definition at line 140 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1a54b157af9fc7b884c3af0faa045b37ba"/>    <section>
    <title>UART1_Write()</title>
<indexterm><primary>UART1_Write</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_Write</secondary></indexterm>
<para><computeroutput>void UART1_Write (uint8_t byte)</computeroutput></para>
<para>@Summary Writes a byte of data to the UART1</para>

<para>@Description This routine writes a byte of data to the UART1.</para>

<para>@Preconditions UART1_Initialize function should have been called before calling this function. The transfer status should be checked to see if transmitter is not full before calling this function.</para>

<para>@Param byte - Data byte to write to the UART1</para>

<para>@Returns None.</para>

<para>@Example None. </para>
<para>
Definition at line 267 of file uart1.c.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_uart1_8c_1adb1e097e46e2939d8c341298892a9333"/>    <section>
    <title>UART1_RxDefaultInterruptHandler</title>
<indexterm><primary>UART1_RxDefaultInterruptHandler</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_RxDefaultInterruptHandler</secondary></indexterm>
<para><computeroutput>void(* UART1_RxDefaultInterruptHandler) (void) (void )</computeroutput></para><para>
Definition at line 97 of file uart1.c.</para>
    </section><anchor xml:id="_uart1_8c_1ac05fd2e970a7c8da5ea79d54963514ce"/>    <section>
    <title>UART1_TxDefaultInterruptHandler</title>
<indexterm><primary>UART1_TxDefaultInterruptHandler</primary><secondary>uart1.c</secondary></indexterm>
<indexterm><primary>uart1.c</primary><secondary>UART1_TxDefaultInterruptHandler</secondary></indexterm>
<para><computeroutput>void(* UART1_TxDefaultInterruptHandler) (void) (void )</computeroutput></para><para>
Definition at line 96 of file uart1.c.</para>
</section>
</section>
</section>
